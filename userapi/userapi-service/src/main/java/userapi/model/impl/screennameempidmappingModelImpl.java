/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package userapi.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import userapi.model.screennameempidmapping;
import userapi.model.screennameempidmappingModel;
import userapi.model.screennameempidmappingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the screennameempidmapping service. Represents a row in the &quot;screennameempidmapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link screennameempidmappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link screennameempidmappingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see screennameempidmappingImpl
 * @see screennameempidmapping
 * @see screennameempidmappingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class screennameempidmappingModelImpl extends BaseModelImpl<screennameempidmapping>
	implements screennameempidmappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a screennameempidmapping model instance should use the {@link screennameempidmapping} interface instead.
	 */
	public static final String TABLE_NAME = "screennameempidmapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "srno", Types.INTEGER },
			{ "screenname", Types.VARCHAR },
			{ "empid", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("srno", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("screenname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empid", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table screennameempidmapping (srno INTEGER not null primary key,screenname VARCHAR(75) null,empid VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table screennameempidmapping";
	public static final String ORDER_BY_JPQL = " ORDER BY screennameempidmapping.srno ASC";
	public static final String ORDER_BY_SQL = " ORDER BY screennameempidmapping.srno ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(userapi.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.userapi.model.screennameempidmapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(userapi.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.userapi.model.screennameempidmapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(userapi.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.userapi.model.screennameempidmapping"),
			true);
	public static final long SCREENNAME_COLUMN_BITMASK = 1L;
	public static final long SRNO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static screennameempidmapping toModel(
		screennameempidmappingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		screennameempidmapping model = new screennameempidmappingImpl();

		model.setSrno(soapModel.getSrno());
		model.setScreenname(soapModel.getScreenname());
		model.setEmpid(soapModel.getEmpid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<screennameempidmapping> toModels(
		screennameempidmappingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<screennameempidmapping> models = new ArrayList<screennameempidmapping>(soapModels.length);

		for (screennameempidmappingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(userapi.service.util.ServiceProps.get(
				"lock.expiration.time.userapi.model.screennameempidmapping"));

	public screennameempidmappingModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _srno;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setSrno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _srno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return screennameempidmapping.class;
	}

	@Override
	public String getModelClassName() {
		return screennameempidmapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("srno", getSrno());
		attributes.put("screenname", getScreenname());
		attributes.put("empid", getEmpid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer srno = (Integer)attributes.get("srno");

		if (srno != null) {
			setSrno(srno);
		}

		String screenname = (String)attributes.get("screenname");

		if (screenname != null) {
			setScreenname(screenname);
		}

		String empid = (String)attributes.get("empid");

		if (empid != null) {
			setEmpid(empid);
		}
	}

	@JSON
	@Override
	public int getSrno() {
		return _srno;
	}

	@Override
	public void setSrno(int srno) {
		_srno = srno;
	}

	@JSON
	@Override
	public String getScreenname() {
		if (_screenname == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenname;
		}
	}

	@Override
	public void setScreenname(String screenname) {
		_columnBitmask |= SCREENNAME_COLUMN_BITMASK;

		if (_originalScreenname == null) {
			_originalScreenname = _screenname;
		}

		_screenname = screenname;
	}

	public String getOriginalScreenname() {
		return GetterUtil.getString(_originalScreenname);
	}

	@JSON
	@Override
	public String getEmpid() {
		if (_empid == null) {
			return StringPool.BLANK;
		}
		else {
			return _empid;
		}
	}

	@Override
	public void setEmpid(String empid) {
		_empid = empid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public screennameempidmapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (screennameempidmapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		screennameempidmappingImpl screennameempidmappingImpl = new screennameempidmappingImpl();

		screennameempidmappingImpl.setSrno(getSrno());
		screennameempidmappingImpl.setScreenname(getScreenname());
		screennameempidmappingImpl.setEmpid(getEmpid());

		screennameempidmappingImpl.resetOriginalValues();

		return screennameempidmappingImpl;
	}

	@Override
	public int compareTo(screennameempidmapping screennameempidmapping) {
		int primaryKey = screennameempidmapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof screennameempidmapping)) {
			return false;
		}

		screennameempidmapping screennameempidmapping = (screennameempidmapping)obj;

		int primaryKey = screennameempidmapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		screennameempidmappingModelImpl screennameempidmappingModelImpl = this;

		screennameempidmappingModelImpl._originalScreenname = screennameempidmappingModelImpl._screenname;

		screennameempidmappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<screennameempidmapping> toCacheModel() {
		screennameempidmappingCacheModel screennameempidmappingCacheModel = new screennameempidmappingCacheModel();

		screennameempidmappingCacheModel.srno = getSrno();

		screennameempidmappingCacheModel.screenname = getScreenname();

		String screenname = screennameempidmappingCacheModel.screenname;

		if ((screenname != null) && (screenname.length() == 0)) {
			screennameempidmappingCacheModel.screenname = null;
		}

		screennameempidmappingCacheModel.empid = getEmpid();

		String empid = screennameempidmappingCacheModel.empid;

		if ((empid != null) && (empid.length() == 0)) {
			screennameempidmappingCacheModel.empid = null;
		}

		return screennameempidmappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{srno=");
		sb.append(getSrno());
		sb.append(", screenname=");
		sb.append(getScreenname());
		sb.append(", empid=");
		sb.append(getEmpid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("userapi.model.screennameempidmapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>srno</column-name><column-value><![CDATA[");
		sb.append(getSrno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenname</column-name><column-value><![CDATA[");
		sb.append(getScreenname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empid</column-name><column-value><![CDATA[");
		sb.append(getEmpid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = screennameempidmapping.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			screennameempidmapping.class
		};
	private int _srno;
	private String _screenname;
	private String _originalScreenname;
	private String _empid;
	private long _columnBitmask;
	private screennameempidmapping _escapedModel;
}