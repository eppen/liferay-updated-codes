/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package userapi.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import userapi.model.zone;
import userapi.model.zoneModel;
import userapi.model.zoneSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the zone service. Represents a row in the &quot;zone&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link zoneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link zoneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see zoneImpl
 * @see zone
 * @see zoneModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class zoneModelImpl extends BaseModelImpl<zone> implements zoneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a zone model instance should use the {@link zone} interface instead.
	 */
	public static final String TABLE_NAME = "zone";
	public static final Object[][] TABLE_COLUMNS = {
			{ "zone_id", Types.INTEGER },
			{ "zone", Types.VARCHAR },
			{ "business_id", Types.INTEGER },
			{ "isactive", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("zone_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("zone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("business_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isactive", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table zone (zone_id INTEGER not null primary key,zone VARCHAR(75) null,business_id INTEGER,isactive INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table zone";
	public static final String ORDER_BY_JPQL = " ORDER BY zone.zone_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY zone.zone_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(userapi.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.userapi.model.zone"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(userapi.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.userapi.model.zone"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static zone toModel(zoneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		zone model = new zoneImpl();

		model.setZone_id(soapModel.getZone_id());
		model.setZone(soapModel.getZone());
		model.setBusiness_id(soapModel.getBusiness_id());
		model.setIsactive(soapModel.getIsactive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<zone> toModels(zoneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<zone> models = new ArrayList<zone>(soapModels.length);

		for (zoneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(userapi.service.util.ServiceProps.get(
				"lock.expiration.time.userapi.model.zone"));

	public zoneModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _zone_id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setZone_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _zone_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return zone.class;
	}

	@Override
	public String getModelClassName() {
		return zone.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("zone_id", getZone_id());
		attributes.put("zone", getZone());
		attributes.put("business_id", getBusiness_id());
		attributes.put("isactive", getIsactive());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer zone_id = (Integer)attributes.get("zone_id");

		if (zone_id != null) {
			setZone_id(zone_id);
		}

		String zone = (String)attributes.get("zone");

		if (zone != null) {
			setZone(zone);
		}

		Integer business_id = (Integer)attributes.get("business_id");

		if (business_id != null) {
			setBusiness_id(business_id);
		}

		Integer isactive = (Integer)attributes.get("isactive");

		if (isactive != null) {
			setIsactive(isactive);
		}
	}

	@JSON
	@Override
	public int getZone_id() {
		return _zone_id;
	}

	@Override
	public void setZone_id(int zone_id) {
		_zone_id = zone_id;
	}

	@JSON
	@Override
	public String getZone() {
		if (_zone == null) {
			return StringPool.BLANK;
		}
		else {
			return _zone;
		}
	}

	@Override
	public void setZone(String zone) {
		_zone = zone;
	}

	@JSON
	@Override
	public int getBusiness_id() {
		return _business_id;
	}

	@Override
	public void setBusiness_id(int business_id) {
		_business_id = business_id;
	}

	@JSON
	@Override
	public int getIsactive() {
		return _isactive;
	}

	@Override
	public void setIsactive(int isactive) {
		_isactive = isactive;
	}

	@Override
	public zone toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (zone)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		zoneImpl zoneImpl = new zoneImpl();

		zoneImpl.setZone_id(getZone_id());
		zoneImpl.setZone(getZone());
		zoneImpl.setBusiness_id(getBusiness_id());
		zoneImpl.setIsactive(getIsactive());

		zoneImpl.resetOriginalValues();

		return zoneImpl;
	}

	@Override
	public int compareTo(zone zone) {
		int primaryKey = zone.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof zone)) {
			return false;
		}

		zone zone = (zone)obj;

		int primaryKey = zone.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<zone> toCacheModel() {
		zoneCacheModel zoneCacheModel = new zoneCacheModel();

		zoneCacheModel.zone_id = getZone_id();

		zoneCacheModel.zone = getZone();

		String zone = zoneCacheModel.zone;

		if ((zone != null) && (zone.length() == 0)) {
			zoneCacheModel.zone = null;
		}

		zoneCacheModel.business_id = getBusiness_id();

		zoneCacheModel.isactive = getIsactive();

		return zoneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{zone_id=");
		sb.append(getZone_id());
		sb.append(", zone=");
		sb.append(getZone());
		sb.append(", business_id=");
		sb.append(getBusiness_id());
		sb.append(", isactive=");
		sb.append(getIsactive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("userapi.model.zone");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>zone_id</column-name><column-value><![CDATA[");
		sb.append(getZone_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zone</column-name><column-value><![CDATA[");
		sb.append(getZone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>business_id</column-name><column-value><![CDATA[");
		sb.append(getBusiness_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isactive</column-name><column-value><![CDATA[");
		sb.append(getIsactive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = zone.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			zone.class
		};
	private int _zone_id;
	private String _zone;
	private int _business_id;
	private int _isactive;
	private zone _escapedModel;
}